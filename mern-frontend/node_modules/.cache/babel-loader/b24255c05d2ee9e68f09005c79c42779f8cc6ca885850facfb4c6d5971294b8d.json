{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dilip\\\\Downloads\\\\MERN-Machine-Test (1)\\\\mern-frontend\\\\src\\\\components\\\\UploadList.jsx\",\n  _s = $RefreshSig$();\n// Sample content for src/components/UploadList.jsx\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadCSV = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const upload = async e => {\n    e.preventDefault();\n    if (!file) return alert('Please select a file');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      await axios.post('/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: localStorage.getItem('token')\n        }\n      });\n      alert('File uploaded and distributed successfully');\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.msg) || 'Upload failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: upload,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload CSV/XLSX\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv,.xlsx,.xls\",\n      onChange: e => setFile(e.target.files[0]),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadCSV, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = UploadCSV;\nexport default UploadCSV;\nvar _c;\n$RefreshReg$(_c, \"UploadCSV\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadCSV","_s","file","setFile","upload","e","preventDefault","alert","formData","FormData","append","post","headers","Authorization","localStorage","getItem","err","_err$response","_err$response$data","response","data","msg","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","target","files","required","_c","$RefreshReg$"],"sources":["C:/Users/dilip/Downloads/MERN-Machine-Test (1)/mern-frontend/src/components/UploadList.jsx"],"sourcesContent":["// Sample content for src/components/UploadList.jsx\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst UploadCSV = () => {\n  const [file, setFile] = useState(null);\n\n  const upload = async (e) => {\n    e.preventDefault();\n    if (!file) return alert('Please select a file');\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      await axios.post('/api/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: localStorage.getItem('token')\n        }\n      });\n      alert('File uploaded and distributed successfully');\n    } catch (err) {\n      alert(err.response?.data?.msg || 'Upload failed');\n    }\n  };\n\n  return (\n    <form onSubmit={upload}>\n      <h2>Upload CSV/XLSX</h2>\n      <input type=\"file\" accept=\".csv,.xlsx,.xls\" onChange={(e) => setFile(e.target.files[0])} required />\n      <button type=\"submit\">Upload</button>\n    </form>\n  );\n};\n\nexport default UploadCSV;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMQ,MAAM,GAAG,MAAOC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACJ,IAAI,EAAE,OAAOK,KAAK,CAAC,sBAAsB,CAAC;IAE/C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC;IAE7B,IAAI;MACF,MAAML,KAAK,CAACc,IAAI,CAAC,aAAa,EAAEH,QAAQ,EAAE;QACxCI,OAAO,EAAE;UACP,cAAc,EAAE,qBAAqB;UACrCC,aAAa,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAC7C;MACF,CAAC,CAAC;MACFR,KAAK,CAAC,4CAA4C,CAAC;IACrD,CAAC,CAAC,OAAOS,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZX,KAAK,CAAC,EAAAU,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcG,IAAI,cAAAF,kBAAA,uBAAlBA,kBAAA,CAAoBG,GAAG,KAAI,eAAe,CAAC;IACnD;EACF,CAAC;EAED,oBACEtB,OAAA;IAAMuB,QAAQ,EAAElB,MAAO;IAAAmB,QAAA,gBACrBxB,OAAA;MAAAwB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,iBAAiB;MAACC,QAAQ,EAAGzB,CAAC,IAAKF,OAAO,CAACE,CAAC,CAAC0B,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;MAACC,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpG5B,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEX,CAAC;AAAC1B,EAAA,CA9BID,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AAgCf,eAAeA,SAAS;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}